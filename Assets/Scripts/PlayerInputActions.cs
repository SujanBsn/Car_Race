//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Scripts/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Movements"",
            ""id"": ""7d37ac24-2ecf-4082-8432-2e7788f355c8"",
            ""actions"": [
                {
                    ""name"": ""K_LeftRight"",
                    ""type"": ""Value"",
                    ""id"": ""62bca1dc-863d-49e9-b2fe-d4426fc403c7"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""K_Accl"",
                    ""type"": ""Value"",
                    ""id"": ""0339a8cd-9346-4ef9-bb24-a0c41658a161"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""S_LeftRight"",
                    ""type"": ""Value"",
                    ""id"": ""a2d601af-dfc3-4f48-b86e-6bb14d54c7ed"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""LR"",
                    ""id"": ""2a6226e9-f089-482c-b677-7a474ef50581"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""K_LeftRight"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""0197caa9-3c1a-48ce-8dc5-20edb30a49a7"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""K_LeftRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""c9ec11a0-1fec-4bc7-9f03-b48a47068338"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""K_LeftRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Accl/Decl"",
                    ""id"": ""75e9c7f2-ece9-4d82-9b0a-384a475736bc"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""K_Accl"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""86009f43-5e88-4045-b6ca-102739d7acb2"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""K_Accl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""43802841-9327-461b-8652-37e7c3169e0f"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""K_Accl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""61ce2572-345f-47ba-a3bd-576a3025b185"",
                    ""path"": ""<Accelerometer>/acceleration/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""S_LeftRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Sensor"",
            ""bindingGroup"": ""Sensor"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gyroscope>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Movements
        m_Movements = asset.FindActionMap("Movements", throwIfNotFound: true);
        m_Movements_K_LeftRight = m_Movements.FindAction("K_LeftRight", throwIfNotFound: true);
        m_Movements_K_Accl = m_Movements.FindAction("K_Accl", throwIfNotFound: true);
        m_Movements_S_LeftRight = m_Movements.FindAction("S_LeftRight", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movements
    private readonly InputActionMap m_Movements;
    private List<IMovementsActions> m_MovementsActionsCallbackInterfaces = new List<IMovementsActions>();
    private readonly InputAction m_Movements_K_LeftRight;
    private readonly InputAction m_Movements_K_Accl;
    private readonly InputAction m_Movements_S_LeftRight;
    public struct MovementsActions
    {
        private @PlayerInputActions m_Wrapper;
        public MovementsActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @K_LeftRight => m_Wrapper.m_Movements_K_LeftRight;
        public InputAction @K_Accl => m_Wrapper.m_Movements_K_Accl;
        public InputAction @S_LeftRight => m_Wrapper.m_Movements_S_LeftRight;
        public InputActionMap Get() { return m_Wrapper.m_Movements; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementsActions set) { return set.Get(); }
        public void AddCallbacks(IMovementsActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementsActionsCallbackInterfaces.Add(instance);
            @K_LeftRight.started += instance.OnK_LeftRight;
            @K_LeftRight.performed += instance.OnK_LeftRight;
            @K_LeftRight.canceled += instance.OnK_LeftRight;
            @K_Accl.started += instance.OnK_Accl;
            @K_Accl.performed += instance.OnK_Accl;
            @K_Accl.canceled += instance.OnK_Accl;
            @S_LeftRight.started += instance.OnS_LeftRight;
            @S_LeftRight.performed += instance.OnS_LeftRight;
            @S_LeftRight.canceled += instance.OnS_LeftRight;
        }

        private void UnregisterCallbacks(IMovementsActions instance)
        {
            @K_LeftRight.started -= instance.OnK_LeftRight;
            @K_LeftRight.performed -= instance.OnK_LeftRight;
            @K_LeftRight.canceled -= instance.OnK_LeftRight;
            @K_Accl.started -= instance.OnK_Accl;
            @K_Accl.performed -= instance.OnK_Accl;
            @K_Accl.canceled -= instance.OnK_Accl;
            @S_LeftRight.started -= instance.OnS_LeftRight;
            @S_LeftRight.performed -= instance.OnS_LeftRight;
            @S_LeftRight.canceled -= instance.OnS_LeftRight;
        }

        public void RemoveCallbacks(IMovementsActions instance)
        {
            if (m_Wrapper.m_MovementsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementsActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementsActions @Movements => new MovementsActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_SensorSchemeIndex = -1;
    public InputControlScheme SensorScheme
    {
        get
        {
            if (m_SensorSchemeIndex == -1) m_SensorSchemeIndex = asset.FindControlSchemeIndex("Sensor");
            return asset.controlSchemes[m_SensorSchemeIndex];
        }
    }
    public interface IMovementsActions
    {
        void OnK_LeftRight(InputAction.CallbackContext context);
        void OnK_Accl(InputAction.CallbackContext context);
        void OnS_LeftRight(InputAction.CallbackContext context);
    }
}
